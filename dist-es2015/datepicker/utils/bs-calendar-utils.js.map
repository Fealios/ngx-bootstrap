{"version":3,"file":"bs-calendar-utils.js","sourceRoot":"","sources":["../../../.tmp/datepicker/utils/bs-calendar-utils.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,MAAM,EACN,gBAAgB,EAChB,OAAO,EACP,QAAQ,EACR,SAAS,EACT,KAAK,EACL,OAAO,EACR,MAAM,uBAAuB,CAAC;AAE/B,MAAM,mCAAmC,IAAU,EACV,OAAoC;IAC3E,EAAE,CAAC,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC;KACb;IAED,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,MAAM,MAAM,GAAG,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC;IAEpE,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,EAAC,GAAG,EAAE,CAAC,MAAM,EAAC,CAAC,CAAC;CACxC;AAED,MAAM,8BAA8B,OAAe,EAAE,iBAAyB;IAC5E,EAAE,CAAC,CAAC,iBAAiB,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,OAAO,CAAC;KAChB;IAED,MAAM,MAAM,GAAG,OAAO,GAAG,iBAAiB,GAAG,CAAC,CAAC;IAE/C,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;CACzC;AAED,MAAM,0BAA0B,IAAU,EAAE,GAAS,EAAE,GAAS;IAC9D,MAAM,QAAQ,GAAG,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IACnE,MAAM,QAAQ,GAAG,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAEpE,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAC;CAC7B;AAED,MAAM,yBAAyB,IAAU,EAAE,GAAS,EAAE,GAAS;IAC7D,MAAM,QAAQ,GAAG,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAClE,MAAM,QAAQ,GAAG,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAEnE,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAC;CAC7B","sourcesContent":["import {\n  getDay,\n  isFirstDayOfWeek,\n  isAfter,\n  isBefore,\n  shiftDate,\n  endOf,\n  startOf\n} from 'ngx-bootstrap/chronos';\n\nexport function getStartingDayOfCalendar(date: Date,\n                                         options: { firstDayOfWeek?: number }): Date {\n  if (isFirstDayOfWeek(date, options.firstDayOfWeek)) {\n    return date;\n  }\n\n  const weekDay = getDay(date);\n  const offset = calculateDateOffset(weekDay, options.firstDayOfWeek);\n\n  return shiftDate(date, {day: -offset});\n}\n\nexport function calculateDateOffset(weekday: number, startingDayOffset: number): number {\n  if (startingDayOffset === 0) {\n    return weekday;\n  }\n\n  const offset = weekday - startingDayOffset % 7;\n\n  return offset < 0 ? offset + 7 : offset;\n}\n\nexport function isMonthDisabled(date: Date, min: Date, max: Date): boolean {\n  const minBound = min && isBefore(endOf(date, 'month'), min, 'day');\n  const maxBound = max && isAfter(startOf(date, 'month'), max, 'day');\n\n  return minBound || maxBound;\n}\n\nexport function isYearDisabled(date: Date, min: Date, max: Date): boolean {\n  const minBound = min && isBefore(endOf(date, 'year'), min, 'day');\n  const maxBound = max && isAfter(startOf(date, 'year'), max, 'day');\n\n  return minBound || maxBound;\n}\n"]}