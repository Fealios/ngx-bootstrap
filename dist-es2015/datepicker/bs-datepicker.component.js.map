{"version":3,"file":"bs-datepicker.component.js","sourceRoot":"","sources":["../../.tmp/datepicker/bs-datepicker.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACS,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,KAAK,EACrC,MAAM,EAAE,SAAS,EAAiB,gBAAgB,EACtE,MAAM,eAAe,CAAC;AACvB,OAAO,EAAmB,sBAAsB,EAAE,MAAM,sBAAsB,CAAC;AAC/E,OAAO,EAAE,8BAA8B,EAAE,MAAM,+CAA+C,CAAC;AAE/F,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAM5D,MAAM;IAoFJ,YAAmB,OAA2B,EAClC,WAAuB,EACvB,SAAoB,EACpB,iBAAmC,EACnC,GAA2B;QAJpB,YAAO,GAAP,OAAO,CAAoB;;;;yBAhFY,QAAQ;;;;;wBAK9C,OAAO;;;;4BAIH,IAAI;;;;;yBAKP,MAAM;;;;6BA2DmB,IAAI,YAAY,EAAE;qBAE9B,EAAE;;QAWlC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAClC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,YAAY,CACjC,WAAW,EACX,iBAAiB,EACjB,SAAS,CACV,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;QACxC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;KAC3C;;;;QA1EG,MAAM;QACR,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;;IAGlC,IAAI,MAAM,CAAC,KAAc;QACvB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;KACF;;;;QAgBG,OAAO,CAAC,KAAW;QACrB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC;SACR;QACD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;IA6CjC,QAAQ;QACN,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACtB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE;SACxB,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,EAAE,CAAC;KAClB;IAED,WAAW,CAAC,OAAsB;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC1D,MAAM,CAAC;SACR;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;SACrD;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;SACrD;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;SAC3D;KACF;;;;;IAMD,IAAI;QACF,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC;SACR;QAED,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW;aACnC,OAAO,CAAC,EAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC;aAC9D,MAAM,CAAC,8BAA8B,CAAC;aACtC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC;aAClB,QAAQ,CAAC,EAAC,UAAU,EAAE,IAAI,CAAC,SAAS,EAAC,CAAC;aACtC,IAAI,CAAC,EAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAC,CAAC,CAAC;;QAGrC,IAAI,CAAC,KAAK,CAAC,IAAI,CACb,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,KAAW,EAAE,EAAE;YAC3C,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;SAC5C,CAAC,CACH,CAAC;;QAGF,IAAI,CAAC,KAAK,CAAC,IAAI,CACb,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,KAAW,EAAE,EAAE;YACjE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,IAAI,EAAE,CAAC;SACb,CAAC,CACH,CAAC;KACH;;;;;IAMD,IAAI;QACF,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;SACzB;QACD,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7B,GAAG,CAAC,WAAW,EAAE,CAAC;SACnB;KACF;;;;;IAMD,MAAM;QACJ,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;SACpB;QAED,IAAI,CAAC,IAAI,EAAE,CAAC;KACb;;;;IAKD,SAAS;QACP,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE;YAC5D,KAAK,EAAE,IAAI,CAAC,QAAQ;YACpB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,OAAO,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO;YAC/D,OAAO,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO;SAChE,CAAC,CAAC;KACJ;IAED,WAAW;QACT,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;KAC5B;;;YA5MF,SAAS,SAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,QAAQ,EAAE,cAAc;aACzB;;;;YALQ,kBAAkB;YANA,UAAU;YACR,SAAS;YAAiB,gBAAgB;YAE7C,sBAAsB;;;0BAa7C,KAAK;yBAKL,KAAK;6BAIL,KAAK;0BAKL,KAAK;uBAKL,KAAK;wBAgBL,MAAM;yBAIN,MAAM;wBAMN,KAAK;yBAYL,KAAK;2BAIL,KAAK;wBAIL,KAAK;wBAIL,KAAK;8BAIL,MAAM","sourcesContent":["import {\n  ComponentRef, Directive, ElementRef, EventEmitter, Input, OnChanges,\n  OnDestroy, OnInit, Output, Renderer2, SimpleChanges, ViewContainerRef\n} from '@angular/core';\nimport { ComponentLoader, ComponentLoaderFactory } from 'ngx-bootstrap/loader';\nimport { BsDatepickerContainerComponent } from './themes/bs/bs-datepicker-container.component';\nimport { Subscription } from 'rxjs';\nimport { BsDatepickerConfig } from './bs-datepicker.config';\n\n@Directive({\n  selector: '[bsDatepicker]',\n  exportAs: 'bsDatepicker'\n})\nexport class BsDatepickerDirective implements OnInit, OnDestroy, OnChanges {\n  /**\n   * Placement of a datepicker. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   */\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  @Input() triggers = 'click';\n  /**\n   * Close datepicker on outside click\n   */\n  @Input() outsideClick = true;\n  /**\n   * A selector specifying the element the datepicker should be appended to.\n   * Currently only supports \"body\".\n   */\n  @Input() container = 'body';\n\n  /**\n   * Returns whether or not the datepicker is currently being shown\n   */\n  @Input()\n  get isOpen(): boolean {\n    return this._datepicker.isShown;\n  }\n\n  set isOpen(value: boolean) {\n    if (value) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Emits an event when the datepicker is shown\n   */\n  @Output() onShown: EventEmitter<any>;\n  /**\n   * Emits an event when the datepicker is hidden\n   */\n  @Output() onHidden: EventEmitter<any>;\n\n  _bsValue: Date;\n  /**\n   * Initial value of datepicker\n   */\n  @Input()\n  set bsValue(value: Date) {\n    if (this._bsValue === value) {\n      return;\n    }\n    this._bsValue = value;\n    this.bsValueChange.emit(value);\n  }\n\n  /**\n   * Config object for datepicker\n   */\n  @Input() bsConfig: Partial<BsDatepickerConfig>;\n  /**\n   * Indicates whether datepicker's content is enabled or not\n   */\n  @Input() isDisabled: boolean;\n  /**\n   * Minimum date which is available for selection\n   */\n  @Input() minDate: Date;\n  /**\n   * Maximum date which is available for selection\n   */\n  @Input() maxDate: Date;\n  /**\n   * Emits when datepicker value has been changed\n   */\n  @Output() bsValueChange: EventEmitter<Date> = new EventEmitter();\n\n  protected _subs: Subscription[] = [];\n\n  private _datepicker: ComponentLoader<BsDatepickerContainerComponent>;\n  private _datepickerRef: ComponentRef<BsDatepickerContainerComponent>;\n\n  constructor(public _config: BsDatepickerConfig,\n              _elementRef: ElementRef,\n              _renderer: Renderer2,\n              _viewContainerRef: ViewContainerRef,\n              cis: ComponentLoaderFactory) {\n    // todo: assign only subset of fields\n    Object.assign(this, this._config);\n    this._datepicker = cis.createLoader<BsDatepickerContainerComponent>(\n      _elementRef,\n      _viewContainerRef,\n      _renderer\n    );\n    this.onShown = this._datepicker.onShown;\n    this.onHidden = this._datepicker.onHidden;\n  }\n\n  ngOnInit(): any {\n    this._datepicker.listen({\n      outsideClick: this.outsideClick,\n      triggers: this.triggers,\n      show: () => this.show()\n    });\n    this.setConfig();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this._datepickerRef || !this._datepickerRef.instance) {\n      return;\n    }\n\n    if (changes.minDate) {\n      this._datepickerRef.instance.minDate = this.minDate;\n    }\n\n    if (changes.maxDate) {\n      this._datepickerRef.instance.maxDate = this.maxDate;\n    }\n\n    if (changes.isDisabled) {\n      this._datepickerRef.instance.isDisabled = this.isDisabled;\n    }\n  }\n\n  /**\n   * Opens an element’s datepicker. This is considered a “manual” triggering of\n   * the datepicker.\n   */\n  show(): void {\n    if (this._datepicker.isShown) {\n      return;\n    }\n\n    this.setConfig();\n\n    this._datepickerRef = this._datepicker\n      .provide({provide: BsDatepickerConfig, useValue: this._config})\n      .attach(BsDatepickerContainerComponent)\n      .to(this.container)\n      .position({attachment: this.placement})\n      .show({placement: this.placement});\n\n    // if date changes from external source (model -> view)\n    this._subs.push(\n      this.bsValueChange.subscribe((value: Date) => {\n        this._datepickerRef.instance.value = value;\n      })\n    );\n\n    // if date changes from picker (view -> model)\n    this._subs.push(\n      this._datepickerRef.instance.valueChange.subscribe((value: Date) => {\n        this.bsValue = value;\n        this.hide();\n      })\n    );\n  }\n\n  /**\n   * Closes an element’s datepicker. This is considered a “manual” triggering of\n   * the datepicker.\n   */\n  hide(): void {\n    if (this.isOpen) {\n      this._datepicker.hide();\n    }\n    for (const sub of this._subs) {\n      sub.unsubscribe();\n    }\n  }\n\n  /**\n   * Toggles an element’s datepicker. This is considered a “manual” triggering\n   * of the datepicker.\n   */\n  toggle(): void {\n    if (this.isOpen) {\n      return this.hide();\n    }\n\n    this.show();\n  }\n\n  /**\n   * Set config for datepicker\n   */\n  setConfig(): void {\n    this._config = Object.assign({}, this._config, this.bsConfig, {\n      value: this._bsValue,\n      isDisabled: this.isDisabled,\n      minDate: this.minDate || this.bsConfig && this.bsConfig.minDate,\n      maxDate: this.maxDate || this.bsConfig && this.bsConfig.maxDate\n    });\n  }\n\n  ngOnDestroy(): any {\n    this._datepicker.dispose();\n  }\n}\n"]}