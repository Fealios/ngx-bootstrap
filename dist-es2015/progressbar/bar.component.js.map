{"version":3,"file":"bar.component.js","sourceRoot":"","sources":["../../.tmp/progressbar/bar.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,IAAI,EACJ,WAAW,EACX,KAAK,EAGN,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAC/D,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;;;AAoB5C,MAAM;IAsCJ,YAAoB;uBALV,CAAC;QAMT,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC1B;;QAhCG,KAAK;QACP,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;;IAGrB,IAAI,KAAK,CAAC,CAAS;QACjB,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;SACR;QACD,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,qBAAqB,EAAE,CAAC;KAC9B;QAGG,WAAW;QACb,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAE7B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;;IAGtB,IAAI,KAAK;QACP,MAAM,CAAC,KAAK,EAAE,CAAC;KAChB;IAaD,QAAQ;QACN,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KAC5B;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KAC/B;IAED,qBAAqB;QACnB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAElE,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI;aACvC,MAAM,CAAC,UAAU,KAAa,EAAE,GAAiB;YAChD,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC;SAC5B,EAAE,CAAC,CAAC,CAAC;QAER,EAAE,CAAC,CAAC,eAAe,GAAG,GAAG,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,OAAO,IAAI,eAAe,GAAG,GAAG,CAAC;SACvC;KACF;;;YA7EF,SAAS,SAAC;gBACT,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,4BAA4B;gBACtC,IAAI,EAAE;oBACJ,IAAI,EAAE,aAAa;oBACnB,eAAe,EAAE,GAAG;oBACpB,SAAS,EAAE,wEAAwE;oBACnF,+BAA+B,EAAE,mBAAmB;oBACpD,8BAA8B,EAAE,SAAS;oBACzC,gBAAgB,EAAE,kBAAkB;oBACpC,sBAAsB,EAAE,OAAO;oBAC/B,uBAAuB,EAAE,yCAAyC;oBAClE,sBAAsB,EAAE,KAAK;oBAC7B,kBAAkB,EAAE,OAAO;iBAC5B;aACF;;;;YApBQ,oBAAoB,uBA2Dd,IAAI;;;qBAlChB,KAAK;sBAGL,KAAK;4BAaL,WAAW,SAAC,eAAe","sourcesContent":["import {\n  Component,\n  Host,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit\n} from '@angular/core';\n\nimport { ProgressbarComponent } from './progressbar.component';\nimport { isBs3 } from 'ngx-bootstrap/utils';\n\n// todo: number pipe\n// todo: use query from progress?\n@Component({\n  selector: 'bar',\n  template: \"<ng-content></ng-content> \",\n  host: {\n    role: 'progressbar',\n    'aria-valuemin': '0',\n    '[class]': '\"progress-bar \" + (type ? \"progress-bar-\" + type + \" bg-\" + type : \"\")',\n    '[class.progress-bar-animated]': '!isBs3 && animate',\n    '[class.progress-bar-striped]': 'striped',\n    '[class.active]': 'isBs3 && animate',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-valuetext]': 'percent ? percent.toFixed(0) + \"%\" : \"\"',\n    '[attr.aria-valuemax]': 'max',\n    '[style.height.%]': '\"100\"'\n  }\n})\nexport class BarComponent implements OnInit, OnDestroy {\n  max: number;\n\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() type: string;\n\n  /** current value of progress bar */\n  @Input()\n  get value(): number {\n    return this._value;\n  }\n\n  set value(v: number) {\n    if (!v && v !== 0) {\n      return;\n    }\n    this._value = v;\n    this.recalculatePercentage();\n  }\n\n  @HostBinding('style.width.%')\n  get setBarWidth() {\n    this.recalculatePercentage();\n\n    return this.percent;\n  }\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  striped: boolean;\n  animate: boolean;\n  percent = 0;\n  progress: ProgressbarComponent;\n\n  protected _value: number;\n\n  constructor(@Host() progress: ProgressbarComponent) {\n    this.progress = progress;\n  }\n\n  ngOnInit(): void {\n    this.progress.addBar(this);\n  }\n\n  ngOnDestroy(): void {\n    this.progress.removeBar(this);\n  }\n\n  recalculatePercentage(): void {\n    this.percent = +(this.value / this.progress.max * 100).toFixed(2);\n\n    const totalPercentage = this.progress.bars\n      .reduce(function (total: number, bar: BarComponent): number {\n        return total + bar.percent;\n      }, 0);\n\n    if (totalPercentage > 100) {\n      this.percent -= totalPercentage - 100;\n    }\n  }\n}\n"]}